package ${cfg.basePackage}.${cfg.moduleName}.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;


#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import ${cfg.basePackage}.${cfg.moduleName}.service.${table.serviceName};
import ${cfg.basePackage}.${cfg.moduleName}.entity.${table.entityName};

import com.y3tu.tool.web.base.pojo.PageInfo;
import com.y3tu.tool.web.base.pojo.Query;
import com.y3tu.tool.web.base.pojo.R;
import java.util.Map;
import java.util.List;



/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @date  ${date}
 */
@RestController
@RequestMapping("/${cfg.moduleName}/${table.name}")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    ${table.serviceName} service;
    /**
     * 分页查询
     *
     * @param params 查询参数 包含分页信息和查询条件
     *               前台传入参数params封装规则
     *               page：当前页
     *               limit：每页条数
     *               order：排序
     *               查询条件的key要和mapper.xml文件里面的key保持一致
     *
     * @return
     */
    @RequestMapping(value = "/getByPage",method = RequestMethod.GET)
    public R getByPage(@RequestParam Map<String, Object> params) {
        PageInfo pageInfo = new PageInfo(service.queryPage(new Query<Test>(params).getPage(), params));
        return R.ok(pageInfo);
    }

    /**
     * 获取全部数据
     * @return
     */
    @RequestMapping(value = "/getAll",method = RequestMethod.GET)
    public R getAll(){
        return R.ok(service.selectList(null));
    }

    /**
    * 通过id获取
    * @param id
    * @return
    */
    @RequestMapping(value = "/get/{id}",method = RequestMethod.GET)
    public R get(@PathVariable String id){
        return R.ok(service.selectById(id));
    }

    /**
     * 保存数据
    * @param entity 保存的数据
    * @return
     */
    @RequestMapping(value = "/save",method = RequestMethod.POST)
    public R save(@RequestParam ${table.entityName} entity){
        service.insert(entity);
        return R.ok("保存成功!");
    }

    /**
    * 更新数据
    * @param entity 更新的数据
    * @return
    */
    @RequestMapping(value = "/update",method = RequestMethod.PUT)
    public R update(@RequestParam ${table.entityName} entity){
        service.updateById(entity);
        return R.ok("更新成功!");
    }

    /**
    * 删除
    * @param id 主键
    * @return
    */
    @RequestMapping(value = "/delById/{id}",method = RequestMethod.DELETE)
    public R delById(@PathVariable String id){
        service.deleteById(id);
        return R.ok("删除成功!");
    }

    /**
    * 批量删除
    * @param ids 主键集合
    * @return
    */
    @RequestMapping(value = "/delByIds",method = RequestMethod.DELETE)
    public R delByIds(@RequestParam List<String> ids){
        service.deleteBatchIds(ids);
        return R.ok("删除成功!");
    }

}
